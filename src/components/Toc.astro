---
import { convertCollectionToTree, geti18nCollection } from '@src/utils.js'
import { astroI18n, l } from 'astro-i18n'

interface Props {
  path: string
}

const { path } = Astro.props

// FIXME: Hard-coded to docs collection
const entries = await geti18nCollection('docs', astroI18n.langCode)
const tree = convertCollectionToTree(entries)

function resolve(path: string, obj = this, separator = '.') {
  var properties = Array.isArray(path) ? path : path.split(separator)
  return properties.reduce((prev, curr) => prev?.[curr], obj)
}

// FIXME: What if this doesn't exist? Throw an error
const resolvedTree = resolve(path, tree, '/')

Object.entries(resolvedTree).forEach(([_, node]) => {
  if (!node['_metadata']) {
    console.warn(`Missing metadata for ${node.id}`)
  } else {
    if (!node['_metadata']['slug']) {
      console.error(`Missing slug for ${node['_metadata']['id']}`)
    }
    if (!node['_metadata']['meta_title']) {
      console.warn(
        `Missing meta_title frontmatter for ${node['_metadata']['id']}`
      )
    }
    if (!node['_metadata']['meta_description']) {
      console.warn(
        `Missing meta_description frontmatter for ${node['_metadata']['id']}`
      )
    }
  }
})
---

<div class="grid lg:grid-cols-2 gap-4 auto-rows-fr">
  {
    Object.entries(resolvedTree)
      .filter((entry) => entry[0] != '_metadata')
      .map(([_, value]) => (
        <a
          href={l(`/docs/${value['_metadata']['slug']}`)}
          class="card flex flex-col h-full justify-center"
        >
          <h3 class="h3">{value['_metadata']['data']['meta_title']}</h3>
          <p>{value['_metadata']['data']['meta_description']}</p>
        </a>
      ))
  }
</div>
