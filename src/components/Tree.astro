---
import type { CollectionEntry } from 'astro:content'
import { l } from 'astro-i18n'
import TreeNode from './TreeNode.astro'

interface Props {
  entries: CollectionEntry<'docs'>[]
  // Will be appended to the beginning of a slug
  baseUrl?: string
  // Takes into account full slug
  maxDepth?: number
  startsWith?: string
}

// TODO: How to do titles and such for pages that don't have a folder? Do an index file with frontmatter and no content
// TODO: Sort based off of `sidebar_position`

let { entries, baseUrl, maxDepth, startsWith } = Astro.props

if (startsWith) {
  entries = entries.filter((entry) => entry.slug.startsWith(startsWith))
}

if (maxDepth) {
  entries = entries.filter((entry) => entry.slug.split('/').length < maxDepth)
}

entries.sort((a, b) => {
  if (a.data.sidebar_position && b.data.sidebar_position) {
    // Use sidebar position primarily
    return a.data.sidebar_position - b.data.sidebar_position
  } else if (a.data.sidebar_title && b.data.sidebar_title) {
    // Else use the title
    return a.data.sidebar_title.localeCompare(b.data.sidebar_title)
  } else {
    // Else just use the passed order
    return 0
  }
})

const renderedEntries = await Promise.all(
  entries.map(async (entry) => await entry.render())
)
---

<ul>
  {
    entries.map((entry, index) => (
      <li>
        <a href={l(`${baseUrl ? `${baseUrl}/` : ''}${entry.slug}`)}>
          {entry.data.sidebar_title ||
            renderedEntries[index].headings[0]?.text ||
            entry.slug}
        </a>
      </li>
    ))
  }
</ul>
