---
import type { TreeNode } from '@src/utils'
import { l } from 'astro-i18n'

interface Props {
  node: TreeNode
  baseUrl?: string
}

const { node, baseUrl } = Astro.props
const children = Object.entries(node)
  .filter(([key, _]) => key !== '_metadata')
  .map(([_, value]) => value)
const filteredChildren = children.length > 1 ? children : undefined
const url = l(`${baseUrl ? baseUrl : ''}/${node['_metadata']['slug']}`)

function trimSlash(url: string) {
  return url.replace(/^\/+|\/+$/g, '')
}
---

<li>
  <a
    href={url}
    class:list={[
      'list-item',
      { 'list-item-active': trimSlash(url) === trimSlash(Astro.url.pathname) },
    ]}
  >
    {
      node['_metadata']['data']['meta_title']
        ? node['_metadata']['data']['meta_title']
        : node['_metadata']['slug']
    }
  </a>
  {
    filteredChildren && (
      <ul class="pl-4">
        {filteredChildren.map((child) => (
          <Astro.self node={child} baseUrl={baseUrl} />
        ))}
      </ul>
    )
  }
</li>
